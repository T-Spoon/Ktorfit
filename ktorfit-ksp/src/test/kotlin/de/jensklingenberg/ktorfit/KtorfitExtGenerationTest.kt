package de.jensklingenberg.ktorfit

import KtorfitProcessorProvider
import com.google.common.truth.Truth.assertThat
import com.tschuchort.compiletesting.KotlinCompilation
import com.tschuchort.compiletesting.KotlinCompilation.ExitCode
import com.tschuchort.compiletesting.SourceFile
import com.tschuchort.compiletesting.kspIncremental
import com.tschuchort.compiletesting.kspSourcesDir
import com.tschuchort.compiletesting.symbolProcessorProviders
import org.junit.Test
import java.io.File

class KtorfitExtGenerationTest {

    @Test
    fun testKtorfitExtGeneration() {
        val expectedSource = """// Generated by Ktorfit
package de.jensklingenberg.ktorfit

import com.example.api.createSecondTestService
import com.example.api.createTestService

public inline fun <reified T> Ktorfit.create(): T = when(T::class){
  com.example.api.TestService::class ->{
      this.createTestService() as T
      }
      com.example.api.SecondTestService::class ->{
      this.createSecondTestService() as T
      }

  else ->{
  throw IllegalArgumentException("Could not find any Ktorfit annotations in class"+
      T::class.qualifiedName  )
  }
}
"""

        val source1 = SourceFile.kotlin(
            "Source.kt", """
      package com.example.api
import de.jensklingenberg.ktorfit.http.GET

interface TestService {

    @GET("user")
    suspend fun test(): String
    
}
    """
        )

        val source2 = SourceFile.kotlin(
            "Source2.kt", """
      package com.example.api
import de.jensklingenberg.ktorfit.http.GET

interface SecondTestService {

    @GET("user")
    suspend fun test(): String
    
}
    """
        )

        val compilation = KotlinCompilation().apply {
            sources = listOf(source1,source2)
            inheritClassPath = true
            symbolProcessorProviders = listOf(KtorfitProcessorProvider())
            kspIncremental = true
        }
        val result = compilation.compile()
        assertThat(result.exitCode).isEqualTo(ExitCode.OK)

        val generatedSourcesDir = compilation.kspSourcesDir
        val generatedFile = File(
            generatedSourcesDir,
            "/kotlin/de/jensklingenberg/ktorfit/KtorfitExt.kt"
        )
        assertThat(generatedFile.exists()).isTrue()
        assertThat(generatedFile.readText()).isEqualTo(expectedSource)
    }


}